uppercase,exclamation,has_exclamation,question,words_per_sentence,adj,adv,noun,spell_errors,lexical_size,polarity,number_sentences,len_text,word2vec,Text,label
0.09,0.0,1.0,0.0,17.82,0.03,0.04,0.18,0.14,134,0.45454545454545453,11.0,1340.0,2.979419469833374,"Remy Porter Remy escaped the enterprise world and now works as a consultant. Editor-in-Chief for TDWTF.   Unit tests are a wonderful tool for proving that your code works. Ideally, when you’re using other code, like say, the .NET Framework, you don’t write tests that test the framework itself. After all, didn’t Microsoft already do that?   David T ’s co-worker laughs at your naïveté . Why would you trust Microsoft ? You need to make sure the framework works as advertised. Which is why their unit tests are mostly made up of code like this: [Test] public void It_Converts_DataType_Text_Into_ConcreteType() { const string dataTypeText = ""System.DateTime""; var dataType = Type.GetType(dataTypeText); Assert.IsTrue(dataType == typeof(DateTime)); } [Test] public void It_Converts_String_Into_Given_DataType() { const string data = ""10-10-2014""; const string dataTypeText = ""System.DateTime""; var dataType = Type.GetType(dataTypeText); object newData = Convert.ChangeType(data, dataType); Assert.That(newData, Is.TypeOf<DateTime>()); }   Now, if the .NET Framework’s ability to load and recognize types ever breaks, David’s team will be the first to know. [Advertisement] Application Release Automation – build complex release pipelines all managed from one central dashboard, accessibility for the whole team. Download and learn more today!",0.0
